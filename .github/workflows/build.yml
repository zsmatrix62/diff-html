name: CI

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Install wasm32 target
        run: rustup target add wasm32-unknown-unknown

      - name: Install Extism CLI
        run: |
          curl -fsSL https://extism.org/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install wasm-opt
        run: |
          curl -L https://github.com/WebAssembly/binaryen/releases/download/version_116/binaryen-version_116-x86_64-linux.tar.gz -o binaryen.tar.gz
          tar -xzf binaryen.tar.gz
          echo "$(pwd)/binaryen-version_116/bin" >> $GITHUB_PATH
          rm binaryen.tar.gz

      - name: Build project
        id: build
        run: make build
        env:
          OUTPUT_FILE: target/wasm32-unknown-unknown/release/diff_html.wasm

      - name: Delete existing release if present
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/github-script@v6
        with:
          script: |
            try {
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: (await github.rest.repos.getReleaseByTag({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag: context.ref.replace('refs/tags/', '')
                })).data.id
              })
            } catch (error) {
              if (error.status !== 404) {
                throw error
              }
              // Release doesn't exist, continue
            }

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "latest"
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.build.outputs.asset_name }}
          asset_name: diff_html.wasm
          asset_content_type: application/wasm
